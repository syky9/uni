[
    {
        "id": "3bdeb4f1.e08d4c",
        "type": "tab",
        "label": "To read",
        "disabled": false,
        "info": ""
    },
    {
        "id": "bd23afa2.3f751",
        "type": "tab",
        "label": "Configuration",
        "disabled": false,
        "info": ""
    },
    {
        "id": "cfc118ef.6ec4b8",
        "type": "tab",
        "label": "UI",
        "disabled": false,
        "info": ""
    },
    {
        "id": "cb14f4cc.94b658",
        "type": "tab",
        "label": "HTTP",
        "disabled": false,
        "info": ""
    },
    {
        "id": "459c0460.b141bc",
        "type": "tab",
        "label": "MQTT",
        "disabled": false,
        "info": ""
    },
    {
        "id": "e3afc424.b02108",
        "type": "mqtt-broker",
        "z": "",
        "name": "",
        "broker": "mqtt.flespi.io",
        "port": "8883",
        "tls": "37956b33.3e6704",
        "clientid": "",
        "usetls": true,
        "compatmode": true,
        "keepalive": "60",
        "cleansession": true,
        "birthTopic": "devices/unipi/0800/status",
        "birthQos": "1",
        "birthRetain": "true",
        "birthPayload": "connected",
        "closeTopic": "devices/unipi/0800/status",
        "closeQos": "0",
        "closeRetain": "true",
        "closePayload": "disconnected (exp)",
        "willTopic": "devices/unipi/0800/status",
        "willQos": "1",
        "willRetain": "true",
        "willPayload": "disconnected (unexp)"
    },
    {
        "id": "3a2c413.d59abbe",
        "type": "ui_tab",
        "z": "",
        "name": "Home",
        "icon": "dashboard"
    },
    {
        "id": "87806a73.b33908",
        "type": "ui_base",
        "theme": {
            "name": "theme-dark",
            "lightTheme": {
                "default": "#0094CE",
                "baseColor": "#0094CE",
                "baseFont": "-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif",
                "edited": true,
                "reset": false
            },
            "darkTheme": {
                "default": "#097479",
                "baseColor": "#1395c6",
                "baseFont": "-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif",
                "edited": true,
                "reset": false
            },
            "customTheme": {
                "name": "Untitled Theme 1",
                "default": "#4B7930",
                "baseColor": "#4B7930",
                "baseFont": "-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif",
                "reset": false
            },
            "themeState": {
                "base-color": {
                    "default": "#097479",
                    "value": "#1395c6",
                    "edited": true
                },
                "page-titlebar-backgroundColor": {
                    "value": "#1395c6",
                    "edited": false
                },
                "page-backgroundColor": {
                    "value": "#111111",
                    "edited": false
                },
                "page-sidebar-backgroundColor": {
                    "value": "#ffffff",
                    "edited": false
                },
                "group-textColor": {
                    "value": "#39bbec",
                    "edited": false
                },
                "group-borderColor": {
                    "value": "#555555",
                    "edited": false
                },
                "group-backgroundColor": {
                    "value": "#333333",
                    "edited": false
                },
                "widget-textColor": {
                    "value": "#eeeeee",
                    "edited": false
                },
                "widget-backgroundColor": {
                    "value": "#1395c6",
                    "edited": false
                },
                "widget-borderColor": {
                    "value": "#333333",
                    "edited": false
                },
                "base-font": {
                    "value": "-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif"
                }
            }
        },
        "site": {
            "name": "Node-RED Dashboard",
            "hideToolbar": "false",
            "allowSwipe": "false",
            "allowTempTheme": "true",
            "dateFormat": "DD/MM/YYYY",
            "sizes": {
                "sx": 48,
                "sy": 48,
                "gx": 6,
                "gy": 6,
                "cx": 6,
                "cy": 6,
                "px": 0,
                "py": 0
            }
        }
    },
    {
        "id": "1750ed1.acf9a13",
        "type": "modbus-client",
        "z": "",
        "name": "RS485",
        "clienttype": "serial",
        "bufferCommands": true,
        "stateLogEnabled": true,
        "tcpHost": "127.0.0.1",
        "tcpPort": "502",
        "tcpType": "DEFAULT",
        "serialPort": "/dev/extcomm/0/0",
        "serialType": "RTU-BUFFERD",
        "serialBaudrate": "9600",
        "serialDatabits": "8",
        "serialStopbits": "1",
        "serialParity": "even",
        "serialConnectionDelay": "500",
        "unit_id": "2",
        "commandDelay": "20",
        "clientTimeout": "1000",
        "reconnectTimeout": "2000"
    },
    {
        "id": "1eddd28.1e0422e",
        "type": "ui_group",
        "z": "",
        "name": "Read",
        "tab": "3a2c413.d59abbe",
        "order": 2,
        "disp": true,
        "width": "8",
        "collapse": false
    },
    {
        "id": "3500af83.13cf3",
        "type": "ui_group",
        "z": "",
        "name": "System",
        "tab": "3a2c413.d59abbe",
        "disp": true,
        "width": "6",
        "collapse": false
    },
    {
        "id": "d670ddb8.adde",
        "type": "ui_group",
        "z": "",
        "name": "Real time",
        "tab": "3a2c413.d59abbe",
        "disp": true,
        "width": "8",
        "collapse": false
    },
    {
        "id": "37956b33.3e6704",
        "type": "tls-config",
        "z": "",
        "name": "",
        "cert": "",
        "key": "",
        "ca": "",
        "certname": "",
        "keyname": "",
        "caname": "",
        "servername": "",
        "verifyservercert": true
    },
    {
        "id": "f7f7901c.fe027",
        "type": "debug",
        "z": "bd23afa2.3f751",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "x": 790,
        "y": 200,
        "wires": []
    },
    {
        "id": "31a9e540.0648ba",
        "type": "inject",
        "z": "bd23afa2.3f751",
        "name": "Get UniPI SN",
        "topic": "",
        "payload": "",
        "payloadType": "str",
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "x": 170,
        "y": 200,
        "wires": [
            [
                "fc67f786.751518"
            ]
        ]
    },
    {
        "id": "fc67f786.751518",
        "type": "http request",
        "z": "bd23afa2.3f751",
        "name": "",
        "method": "GET",
        "ret": "obj",
        "url": "127.0.0.1:8080/json/neuron/1",
        "tls": "",
        "x": 370,
        "y": 200,
        "wires": [
            [
                "aa248044.1e2fa"
            ]
        ]
    },
    {
        "id": "aa248044.1e2fa",
        "type": "change",
        "z": "bd23afa2.3f751",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "payload.data.sn",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 580,
        "y": 200,
        "wires": [
            [
                "f7f7901c.fe027"
            ]
        ]
    },
    {
        "id": "d9a916d3.c4ff38",
        "type": "comment",
        "z": "bd23afa2.3f751",
        "name": "Get UniPi's SN",
        "info": "",
        "x": 160,
        "y": 160,
        "wires": []
    },
    {
        "id": "581d29ba.2afcb8",
        "type": "inject",
        "z": "bd23afa2.3f751",
        "name": "Set 1",
        "topic": "",
        "payload": "{\"led\":\"2\",\"value\":\"1\"}",
        "payloadType": "json",
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "x": 150,
        "y": 480,
        "wires": [
            [
                "98f79b79.9ec288"
            ]
        ]
    },
    {
        "id": "d6a3cf08.5484f",
        "type": "inject",
        "z": "bd23afa2.3f751",
        "name": "Set 0",
        "topic": "",
        "payload": "{\"led\":\"2\",\"value\":\"0\"}",
        "payloadType": "json",
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "x": 150,
        "y": 520,
        "wires": [
            [
                "98f79b79.9ec288"
            ]
        ]
    },
    {
        "id": "5c4d44b.813ecbc",
        "type": "comment",
        "z": "bd23afa2.3f751",
        "name": "Set UniPi's output LEDs { led:X, value:Y}",
        "info": "",
        "x": 240,
        "y": 440,
        "wires": []
    },
    {
        "id": "60811137.437e2",
        "type": "inject",
        "z": "cfc118ef.6ec4b8",
        "name": "",
        "topic": "",
        "payload": "",
        "payloadType": "str",
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "x": 290,
        "y": 360,
        "wires": [
            [
                "4b8368d7.a9bc28",
                "9b11460.d8525b8",
                "146d9fca.b493d",
                "2e11fe48.9ad4e2",
                "9007928f.e39a1",
                "ac605a62.954c48",
                "d162d830.248a98",
                "7fe7cf4c.9b184",
                "39aaef07.8b2bd",
                "783b9f31.62dff"
            ]
        ]
    },
    {
        "id": "4b8368d7.a9bc28",
        "type": "ui_text_input",
        "z": "cfc118ef.6ec4b8",
        "name": "unitid",
        "label": "Unit ID",
        "group": "1eddd28.1e0422e",
        "order": 2,
        "width": 0,
        "height": 0,
        "passthru": false,
        "mode": "number",
        "delay": "1",
        "topic": "unitid",
        "x": 490,
        "y": 400,
        "wires": [
            [
                "3d04116d.8823ce"
            ]
        ]
    },
    {
        "id": "9b11460.d8525b8",
        "type": "ui_text_input",
        "z": "cfc118ef.6ec4b8",
        "name": "address",
        "label": "Address (start register)",
        "group": "1eddd28.1e0422e",
        "order": 3,
        "width": 0,
        "height": 0,
        "passthru": false,
        "mode": "number",
        "delay": "1",
        "topic": "address",
        "x": 500,
        "y": 440,
        "wires": [
            [
                "3d04116d.8823ce"
            ]
        ]
    },
    {
        "id": "146d9fca.b493d",
        "type": "ui_text_input",
        "z": "cfc118ef.6ec4b8",
        "name": "quantity",
        "label": "Quantity (# of registers to read)",
        "group": "1eddd28.1e0422e",
        "order": 4,
        "width": 0,
        "height": 0,
        "passthru": false,
        "mode": "number",
        "delay": "1",
        "topic": "quantity",
        "x": 500,
        "y": 480,
        "wires": [
            [
                "3d04116d.8823ce"
            ]
        ]
    },
    {
        "id": "2e11fe48.9ad4e2",
        "type": "ui_dropdown",
        "z": "cfc118ef.6ec4b8",
        "name": "fc",
        "label": "Function code",
        "place": "Select option",
        "group": "1eddd28.1e0422e",
        "order": 1,
        "width": 0,
        "height": 0,
        "passthru": true,
        "options": [
            {
                "label": "",
                "value": 3,
                "type": "num"
            },
            {
                "label": "",
                "value": 4,
                "type": "num"
            }
        ],
        "payload": "",
        "topic": "fc",
        "x": 490,
        "y": 360,
        "wires": [
            [
                "3d04116d.8823ce"
            ]
        ]
    },
    {
        "id": "3d04116d.8823ce",
        "type": "function",
        "z": "cfc118ef.6ec4b8",
        "name": "",
        "func": "// if values don't exist, create it\ncontext.read_fc = context.read_fc || \"3\";\ncontext.read_unitid = context.read_unitid || \"1\";\ncontext.read_address = context.read_address || \"0\";\ncontext.read_quantity = context.read_quantity || \"2\";\ncontext.read_datatype = context.read_datatype || \"float\";\n\nif (msg.topic == \"fc\") {\n    context.read_fc = msg.payload;\n}\nelse if(msg.topic == \"unitid\") {\n    context.read_unitid = msg.payload;\n}\nelse if(msg.topic == \"address\") {\n    context.read_address = msg.payload;\n}\nelse if(msg.topic == \"quantity\") {\n    context.read_quantity = msg.payload;\n}\nelse if(msg.topic == \"datatype\") {\n    flow.set(\"read_datatype\", msg.payload);\n}\n\n\n    // 'datatype': context.read_datatype,\n\nmsg.payload = \n{ \n    'fc': context.read_fc, \n    'unitid': context.read_unitid, \n    'address': context.read_address, \n    'quantity': context.read_quantity,\n} \n\nif(msg.topic == \"trigger_read\") {\n    return msg;\n}\n//else if(msg.topic == \"trigger_write\") {\n//    return [ null, msg ];\n//}\n\nreturn null;",
        "outputs": 1,
        "noerr": 0,
        "x": 750,
        "y": 360,
        "wires": [
            [
                "88a57114.4363b",
                "7b97008.8bcde",
                "49028de8.901b64"
            ]
        ],
        "outputLabels": [
            "Read"
        ]
    },
    {
        "id": "88a57114.4363b",
        "type": "debug",
        "z": "cfc118ef.6ec4b8",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "x": 950,
        "y": 320,
        "wires": []
    },
    {
        "id": "9007928f.e39a1",
        "type": "ui_button",
        "z": "cfc118ef.6ec4b8",
        "name": "",
        "group": "1eddd28.1e0422e",
        "order": 6,
        "width": 0,
        "height": 0,
        "passthru": false,
        "label": "Read",
        "color": "",
        "bgcolor": "",
        "icon": "",
        "payload": "",
        "payloadType": "str",
        "topic": "trigger_read",
        "x": 490,
        "y": 560,
        "wires": [
            [
                "3d04116d.8823ce"
            ]
        ]
    },
    {
        "id": "7b97008.8bcde",
        "type": "modbus-flex-getter",
        "z": "cfc118ef.6ec4b8",
        "name": "",
        "showStatusActivities": false,
        "showErrors": false,
        "logIOActivities": false,
        "server": "1750ed1.acf9a13",
        "useIOFile": false,
        "ioFile": "",
        "useIOForPayload": false,
        "x": 970,
        "y": 360,
        "wires": [
            [],
            [
                "2065d89f.28b758",
                "ba450648.a2bba8"
            ]
        ]
    },
    {
        "id": "2065d89f.28b758",
        "type": "function",
        "z": "cfc118ef.6ec4b8",
        "name": "",
        "func": "let val = 0;\ndatatype = flow.get(\"read_datatype\");\n\nif (datatype == \"int32\") {\n    val = msg.payload.buffer.readInt32BE(0,4);\n} else if (datatype == \"float\") {\n    val = msg.payload.buffer.readFloatBE(0,4);\n} else if (datatype == \"hex\") {\n    val = msg.payload.buffer.toString('hex');\n}\n\n// let met = msg.input.payload.meterid;\n// let sui = msg.input.payload.address;\n\nmsg.payload = val;\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 1230,
        "y": 360,
        "wires": [
            [
                "ceb3289d.4bbcb8",
                "f02349b.fa132b8"
            ]
        ]
    },
    {
        "id": "ceb3289d.4bbcb8",
        "type": "ui_text",
        "z": "cfc118ef.6ec4b8",
        "group": "1eddd28.1e0422e",
        "order": 7,
        "width": "8",
        "height": "1",
        "name": "",
        "label": "Value",
        "format": "{{msg.payload}}",
        "layout": "row-spread",
        "x": 1370,
        "y": 360,
        "wires": []
    },
    {
        "id": "ffeaaca7.56a1",
        "type": "exec",
        "z": "bd23afa2.3f751",
        "command": "sudo shutdown -r now",
        "addpay": false,
        "append": "",
        "useSpawn": "true",
        "timer": "",
        "oldrc": true,
        "name": "",
        "x": 620,
        "y": 780,
        "wires": [
            [
                "efa0abe5.1909b8"
            ],
            [
                "36e23570.08098a"
            ],
            [
                "d48c43da.66175"
            ]
        ]
    },
    {
        "id": "2120aa24.a692c6",
        "type": "inject",
        "z": "bd23afa2.3f751",
        "name": "Reboot",
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "x": 150,
        "y": 780,
        "wires": [
            [
                "ffeaaca7.56a1"
            ]
        ]
    },
    {
        "id": "efa0abe5.1909b8",
        "type": "debug",
        "z": "bd23afa2.3f751",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "x": 910,
        "y": 760,
        "wires": []
    },
    {
        "id": "36e23570.08098a",
        "type": "debug",
        "z": "bd23afa2.3f751",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "x": 910,
        "y": 800,
        "wires": []
    },
    {
        "id": "d48c43da.66175",
        "type": "debug",
        "z": "bd23afa2.3f751",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "x": 910,
        "y": 840,
        "wires": []
    },
    {
        "id": "ac605a62.954c48",
        "type": "ui_dropdown",
        "z": "cfc118ef.6ec4b8",
        "name": "datatype",
        "label": "Data type",
        "place": "Select option",
        "group": "1eddd28.1e0422e",
        "order": 5,
        "width": 0,
        "height": 0,
        "passthru": false,
        "options": [
            {
                "label": "Int32 BE",
                "value": "int32",
                "type": "str"
            },
            {
                "label": "Float BE",
                "value": "float",
                "type": "str"
            },
            {
                "label": "Raw HEX",
                "value": "hex",
                "type": "str"
            }
        ],
        "payload": "",
        "topic": "datatype",
        "x": 500,
        "y": 520,
        "wires": [
            [
                "3d04116d.8823ce"
            ]
        ]
    },
    {
        "id": "ba450648.a2bba8",
        "type": "debug",
        "z": "cfc118ef.6ec4b8",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "x": 1230,
        "y": 320,
        "wires": []
    },
    {
        "id": "f02349b.fa132b8",
        "type": "debug",
        "z": "cfc118ef.6ec4b8",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "x": 1370,
        "y": 400,
        "wires": []
    },
    {
        "id": "49028de8.901b64",
        "type": "ui_text",
        "z": "cfc118ef.6ec4b8",
        "group": "1eddd28.1e0422e",
        "order": 8,
        "width": 0,
        "height": 0,
        "name": "",
        "label": "Request",
        "format": "{{msg.payload}}",
        "layout": "row-spread",
        "x": 940,
        "y": 420,
        "wires": []
    },
    {
        "id": "d162d830.248a98",
        "type": "ui_button",
        "z": "cfc118ef.6ec4b8",
        "name": "",
        "group": "3500af83.13cf3",
        "order": 2,
        "width": 0,
        "height": 0,
        "passthru": false,
        "label": "Reboot",
        "color": "",
        "bgcolor": "",
        "icon": "",
        "payload": "",
        "payloadType": "str",
        "topic": "",
        "x": 500,
        "y": 700,
        "wires": [
            [
                "edef7ef3.37e3e"
            ]
        ]
    },
    {
        "id": "edef7ef3.37e3e",
        "type": "link out",
        "z": "cfc118ef.6ec4b8",
        "name": "Reboot",
        "links": [
            "c94c426f.5cd82"
        ],
        "x": 715,
        "y": 700,
        "wires": []
    },
    {
        "id": "c94c426f.5cd82",
        "type": "link in",
        "z": "bd23afa2.3f751",
        "name": "",
        "links": [
            "edef7ef3.37e3e"
        ],
        "x": 175,
        "y": 740,
        "wires": [
            [
                "ffeaaca7.56a1"
            ]
        ]
    },
    {
        "id": "7fe7cf4c.9b184",
        "type": "ui_button",
        "z": "cfc118ef.6ec4b8",
        "name": "",
        "group": "3500af83.13cf3",
        "order": 3,
        "width": "3",
        "height": "1",
        "passthru": false,
        "label": "Open ngrok SSH",
        "color": "",
        "bgcolor": "",
        "icon": "",
        "payload": "",
        "payloadType": "str",
        "topic": "",
        "x": 530,
        "y": 740,
        "wires": [
            [
                "c56dc60f.e4fb38"
            ]
        ]
    },
    {
        "id": "39aaef07.8b2bd",
        "type": "ui_button",
        "z": "cfc118ef.6ec4b8",
        "name": "",
        "group": "3500af83.13cf3",
        "order": 4,
        "width": "3",
        "height": "1",
        "passthru": false,
        "label": "Kill ngrok SSH",
        "color": "",
        "bgcolor": "",
        "icon": "",
        "payload": "",
        "payloadType": "str",
        "topic": "",
        "x": 520,
        "y": 780,
        "wires": [
            [
                "15ed14e5.3b6b8b"
            ]
        ]
    },
    {
        "id": "c56dc60f.e4fb38",
        "type": "link out",
        "z": "cfc118ef.6ec4b8",
        "name": "Open ngrok",
        "links": [
            "c03ffb31.4f9cd8"
        ],
        "x": 715,
        "y": 740,
        "wires": []
    },
    {
        "id": "15ed14e5.3b6b8b",
        "type": "link out",
        "z": "cfc118ef.6ec4b8",
        "name": "Kill ngrok",
        "links": [
            "8ddc30eb.d122d"
        ],
        "x": 715,
        "y": 780,
        "wires": []
    },
    {
        "id": "783b9f31.62dff",
        "type": "http request",
        "z": "cfc118ef.6ec4b8",
        "name": "SN",
        "method": "GET",
        "ret": "obj",
        "url": "127.0.0.1:8080/json/neuron/1",
        "tls": "",
        "x": 490,
        "y": 660,
        "wires": [
            [
                "ff1cbeb9.22849"
            ]
        ]
    },
    {
        "id": "ff1cbeb9.22849",
        "type": "change",
        "z": "cfc118ef.6ec4b8",
        "name": "SN",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "payload.data.sn",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 610,
        "y": 660,
        "wires": [
            [
                "ec0eb144.071be"
            ]
        ]
    },
    {
        "id": "ec0eb144.071be",
        "type": "ui_text",
        "z": "cfc118ef.6ec4b8",
        "group": "3500af83.13cf3",
        "order": 1,
        "width": 0,
        "height": 0,
        "name": "",
        "label": "UniPi SN",
        "format": "{{msg.payload}}",
        "layout": "row-spread",
        "x": 760,
        "y": 660,
        "wires": []
    },
    {
        "id": "5ca9fee6.cefe1",
        "type": "ui_text",
        "z": "cfc118ef.6ec4b8",
        "group": "3500af83.13cf3",
        "order": 5,
        "width": 0,
        "height": 0,
        "name": "ngrok status",
        "label": "ngrok status",
        "format": "{{msg.status.text}}",
        "layout": "row-spread",
        "x": 710,
        "y": 820,
        "wires": []
    },
    {
        "id": "efe0d906.d78298",
        "type": "link in",
        "z": "cfc118ef.6ec4b8",
        "name": "ngrok status",
        "links": [
            "eddf1814.12a368"
        ],
        "x": 455,
        "y": 820,
        "wires": [
            [
                "5ca9fee6.cefe1"
            ]
        ]
    },
    {
        "id": "349a56c5.958f7a",
        "type": "ui_text",
        "z": "cfc118ef.6ec4b8",
        "group": "3500af83.13cf3",
        "order": 5,
        "width": 0,
        "height": 0,
        "name": "modbus status",
        "label": "Modbus status",
        "format": "{{msg.status.text}}",
        "layout": "row-spread",
        "x": 720,
        "y": 860,
        "wires": []
    },
    {
        "id": "6fdbe053.bde2b",
        "type": "link in",
        "z": "cfc118ef.6ec4b8",
        "name": "ngrok status",
        "links": [
            "4b3f19ae.313b98"
        ],
        "x": 455,
        "y": 860,
        "wires": [
            [
                "349a56c5.958f7a"
            ]
        ]
    },
    {
        "id": "abf466e0.91a5f8",
        "type": "http request",
        "z": "cb14f4cc.94b658",
        "name": "",
        "method": "POST",
        "ret": "txt",
        "url": "https://api.mericitechnologie.cz/readings/1e93b77a-64df-42b1-844d-55d1e124a548",
        "tls": "",
        "x": 1250,
        "y": 240,
        "wires": [
            [
                "423c4c8a.2969c4",
                "a6474852.464148"
            ]
        ]
    },
    {
        "id": "c7f30a99.7f32e8",
        "type": "modbus-flex-getter",
        "z": "cb14f4cc.94b658",
        "name": "",
        "showStatusActivities": false,
        "showErrors": false,
        "logIOActivities": false,
        "server": "1750ed1.acf9a13",
        "useIOFile": false,
        "ioFile": "",
        "useIOForPayload": false,
        "x": 370,
        "y": 240,
        "wires": [
            [],
            [
                "fd2c51bf.edb06",
                "61d96393.e2325c"
            ]
        ]
    },
    {
        "id": "fd2c51bf.edb06",
        "type": "function",
        "z": "cb14f4cc.94b658",
        "name": "Extract 32bit",
        "func": "if (msg.input.payload.value.datatype == \"int32\") {\n    val = msg.payload.buffer.readInt32BE(0,4);\n} else if (msg.input.payload.value.datatype == \"float\") {\n    val = msg.payload.buffer.readFloatBE(0,4);\n} else if (msg.input.payload.value.datatype == \"hex\") {\n    val = msg.payload.buffer.toString('hex');\n}\n\nlet met = msg.input.payload.value.meterid;\nlet sui = msg.input.payload.address;\n\nmsg = {};\n\nmsg.payload = \n{\n    'value': val,\n    'time': Date.now(),\n    'meterid': met,\n    'suit': sui,\n};\n\nreturn msg;\n\n",
        "outputs": 1,
        "noerr": 0,
        "x": 590,
        "y": 240,
        "wires": [
            [
                "bfb3593.2e1a1a8",
                "8fb4ccb4.d44da"
            ]
        ]
    },
    {
        "id": "5115d5da.aed33c",
        "type": "debug",
        "z": "cb14f4cc.94b658",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "x": 1030,
        "y": 300,
        "wires": []
    },
    {
        "id": "bfb3593.2e1a1a8",
        "type": "function",
        "z": "cb14f4cc.94b658",
        "name": "Prepare HTTP request",
        "func": "// PAYLOAD EXAMPLE:\n// msg.payload = {\n//     \"value\": 0.131,\n//     \"time\": 1542296316217,\n//     \"meterid\": 73130497,\n//     \"suit\": 23,\n// };\n\nincoming_message = msg.payload;\nmsg = {};\n\n\nISOtimeObj = new Date(incoming_message.time);\nISOtime = ISOtimeObj.toISOString();\n\nmsg.headers = {\n    'Content-Type': 'application/vnd.api+json',\n    'Authorization': 'Bearer: eyJhbGciOiJFUzI1NiJ9.eyJqaXQiOiJiODAzMWQ5MTM0MDNkNWJmIiwic2NwIjoibGEiLCJ2ZXIiOjEsInN1YiI6IjFlOTNiNzdhLTY0ZGYtNDJiMS04NDRkLTU1ZDFlMTI0YTU0OCJ9.lbvlr-5HDhxDDufGDszkrgIqjwydWcFWbZBOX_1lpzD42V2Wsf00NvCqzMeWja1ZHKqKoRfVtK23O-7e-jvobA',\n    'Accept': 'application/vnd.api+json'\n}\n\nmsg.payload = {\n    \"data\": {\n        \"time\": ISOtime,\n        \"state\": incoming_message.value,\n        \"meter_id\": incoming_message.meterid.toString(),\n        \"sender\": \"unipi\",\n        \"suit\": incoming_message.suit.toString()\n    }\n}\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 820,
        "y": 240,
        "wires": [
            [
                "5115d5da.aed33c",
                "8ceef0fc.c54de"
            ]
        ]
    },
    {
        "id": "8fb4ccb4.d44da",
        "type": "debug",
        "z": "cb14f4cc.94b658",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "x": 770,
        "y": 300,
        "wires": []
    },
    {
        "id": "423c4c8a.2969c4",
        "type": "debug",
        "z": "cb14f4cc.94b658",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "x": 1430,
        "y": 300,
        "wires": []
    },
    {
        "id": "61d96393.e2325c",
        "type": "debug",
        "z": "cb14f4cc.94b658",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "x": 570,
        "y": 300,
        "wires": []
    },
    {
        "id": "5f9f3b85.152424",
        "type": "link in",
        "z": "cfc118ef.6ec4b8",
        "name": "HTTP requests in last hour",
        "links": [
            "3db28c.db6a0d74",
            "dde1b039.23d75",
            "9a2e24b4.64f0a8"
        ],
        "x": 455,
        "y": 980,
        "wires": [
            []
        ]
    },
    {
        "id": "a6474852.464148",
        "type": "switch",
        "z": "cb14f4cc.94b658",
        "name": "",
        "property": "statusCode",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "201",
                "vt": "num"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 1430,
        "y": 180,
        "wires": [
            [
                "bdd2dabe.696fd8"
            ],
            [
                "c8bef3d3.893a8"
            ]
        ]
    },
    {
        "id": "bdd2dabe.696fd8",
        "type": "debug",
        "z": "cb14f4cc.94b658",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "x": 1630,
        "y": 60,
        "wires": []
    },
    {
        "id": "c8bef3d3.893a8",
        "type": "debug",
        "z": "cb14f4cc.94b658",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "x": 1630,
        "y": 180,
        "wires": []
    },
    {
        "id": "8ceef0fc.c54de",
        "type": "delay",
        "z": "cb14f4cc.94b658",
        "name": "",
        "pauseType": "rate",
        "timeout": "5",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "x": 1050,
        "y": 240,
        "wires": [
            [
                "abf466e0.91a5f8"
            ]
        ]
    },
    {
        "id": "8c9d4c73.692fc",
        "type": "modbus-flex-getter",
        "z": "459c0460.b141bc",
        "name": "",
        "showStatusActivities": false,
        "showErrors": false,
        "logIOActivities": false,
        "server": "1750ed1.acf9a13",
        "useIOFile": false,
        "ioFile": "",
        "useIOForPayload": false,
        "x": 350,
        "y": 100,
        "wires": [
            [],
            [
                "786686d1.3815a8",
                "e6edcf74.379e6"
            ]
        ]
    },
    {
        "id": "786686d1.3815a8",
        "type": "function",
        "z": "459c0460.b141bc",
        "name": "Extract 32bit",
        "func": "if (msg.input.payload.value.datatype == \"int32\") {\n    val = msg.payload.buffer.readInt32BE(0,4);\n} else if (msg.input.payload.value.datatype == \"float\") {\n    val = msg.payload.buffer.readFloatBE(0,4);\n} else if (msg.input.payload.value.datatype == \"hex\") {\n    val = msg.payload.buffer.toString('hex');\n}\n\nlet met = msg.input.payload.value.meterid;\nlet sui = msg.input.payload.address;\n\nmsg = {};\n\nmsg.payload = \n{\n    'value': val,\n    'time': Date.now(),\n    'meterid': met,\n    'suit': sui\n};\n\nreturn msg;\n\n",
        "outputs": 1,
        "noerr": 0,
        "x": 570,
        "y": 100,
        "wires": [
            [
                "c760c249.c4168",
                "77c49c29.5ee0f4"
            ]
        ]
    },
    {
        "id": "2345cd73.cd1342",
        "type": "debug",
        "z": "459c0460.b141bc",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "x": 1010,
        "y": 160,
        "wires": []
    },
    {
        "id": "c760c249.c4168",
        "type": "function",
        "z": "459c0460.b141bc",
        "name": "Prepare MQTT",
        "func": "incoming_message = msg.payload;\nmsg = {};\n\n\ncust_uuid = global.get('cust_uuid');\n\nsuit = incoming_message.suit.toString();\nmeter_id = incoming_message.meterid.toString();\n\nmsg.payload = {\n    \"time\": incoming_message.time,\n    \"state\": incoming_message.value,\n}\n\nmsg.topic = 'data_point/' + cust_uuid + '/' + meter_id + '/' + suit;\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 780,
        "y": 100,
        "wires": [
            [
                "2345cd73.cd1342",
                "901493c6.8412b"
            ]
        ]
    },
    {
        "id": "77c49c29.5ee0f4",
        "type": "debug",
        "z": "459c0460.b141bc",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "x": 750,
        "y": 160,
        "wires": []
    },
    {
        "id": "e6edcf74.379e6",
        "type": "debug",
        "z": "459c0460.b141bc",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "x": 550,
        "y": 160,
        "wires": []
    },
    {
        "id": "901493c6.8412b",
        "type": "mqtt out",
        "z": "459c0460.b141bc",
        "name": "",
        "topic": "",
        "qos": "1",
        "retain": "false",
        "broker": "e3afc424.b02108",
        "x": 1010,
        "y": 100,
        "wires": []
    },
    {
        "id": "819d0ddf.50257",
        "type": "status",
        "z": "459c0460.b141bc",
        "name": "",
        "scope": [
            "901493c6.8412b"
        ],
        "x": 1000,
        "y": 240,
        "wires": [
            [
                "39c42971.6da3f6",
                "b8a7ef1.503a91"
            ]
        ]
    },
    {
        "id": "39c42971.6da3f6",
        "type": "link out",
        "z": "459c0460.b141bc",
        "name": "MQTT status",
        "links": [
            "ca56f1d4.6740c"
        ],
        "x": 1135,
        "y": 240,
        "wires": []
    },
    {
        "id": "ca56f1d4.6740c",
        "type": "link in",
        "z": "cfc118ef.6ec4b8",
        "name": "ngrok status",
        "links": [
            "39c42971.6da3f6"
        ],
        "x": 455,
        "y": 900,
        "wires": [
            [
                "50c7ed7e.03f444",
                "e0ceb3d8.71516"
            ]
        ]
    },
    {
        "id": "50c7ed7e.03f444",
        "type": "ui_text",
        "z": "cfc118ef.6ec4b8",
        "group": "3500af83.13cf3",
        "order": 5,
        "width": 0,
        "height": 0,
        "name": "mqtt status",
        "label": "MQTT status",
        "format": "{{msg.status.text}}",
        "layout": "row-spread",
        "x": 710,
        "y": 900,
        "wires": []
    },
    {
        "id": "558f7367.e8f18c",
        "type": "ui_chart",
        "z": "cfc118ef.6ec4b8",
        "name": "",
        "group": "d670ddb8.adde",
        "order": 0,
        "width": 0,
        "height": 0,
        "label": "chart",
        "chartType": "line",
        "legend": "false",
        "xformat": "HH:mm:ss",
        "interpolate": "step",
        "nodata": "",
        "dot": false,
        "ymin": "",
        "ymax": "",
        "removeOlder": "24",
        "removeOlderPoints": "",
        "removeOlderUnit": "3600",
        "cutout": 0,
        "useOneColor": false,
        "colors": [
            "#1f77b4",
            "#aec7e8",
            "#ff7f0e",
            "#2ca02c",
            "#98df8a",
            "#d62728",
            "#ff9896",
            "#9467bd",
            "#c5b0d5"
        ],
        "useOldStyle": false,
        "x": 810,
        "y": 940,
        "wires": [
            [
                "97ed1426.2e2708"
            ],
            []
        ]
    },
    {
        "id": "b8a7ef1.503a91",
        "type": "debug",
        "z": "459c0460.b141bc",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "x": 1170,
        "y": 280,
        "wires": []
    },
    {
        "id": "e0ceb3d8.71516",
        "type": "function",
        "z": "cfc118ef.6ec4b8",
        "name": "",
        "func": "if (msg.topic != \"ticker\") {\n    if (msg.status.text == \"node-red:common.status.connected\") {\n        context.mqttstatus = '1';\n    } else {\n        context.mqttstatus = '0';\n    }\n} else {\n    msg = {\n        'payload' : context.mqttstatus,\n    }\n    return msg;\n}",
        "outputs": 1,
        "noerr": 0,
        "x": 690,
        "y": 940,
        "wires": [
            [
                "558f7367.e8f18c",
                "f556d641.2a66e8"
            ]
        ]
    },
    {
        "id": "f556d641.2a66e8",
        "type": "debug",
        "z": "cfc118ef.6ec4b8",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "x": 830,
        "y": 980,
        "wires": []
    },
    {
        "id": "3aad4190.de3dae",
        "type": "inject",
        "z": "cfc118ef.6ec4b8",
        "name": "ticker",
        "topic": "ticker",
        "payload": "",
        "payloadType": "str",
        "repeat": "60",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "x": 490,
        "y": 940,
        "wires": [
            [
                "e0ceb3d8.71516"
            ]
        ]
    },
    {
        "id": "97ed1426.2e2708",
        "type": "debug",
        "z": "cfc118ef.6ec4b8",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "x": 1010,
        "y": 980,
        "wires": []
    },
    {
        "id": "c43aeb0e.7a6e18",
        "type": "function",
        "z": "bd23afa2.3f751",
        "name": "",
        "func": "if (msg.payload == \"kill\") {\n    return {\"kill\":\"\"};\n} else if (!isNaN(msg.payload)) {\n    return msg;\n}",
        "outputs": 1,
        "noerr": 0,
        "x": 470,
        "y": 1080,
        "wires": [
            [
                "e9136f6a.19dff"
            ]
        ]
    },
    {
        "id": "e9136f6a.19dff",
        "type": "exec",
        "z": "bd23afa2.3f751",
        "command": "lt -p",
        "addpay": true,
        "append": "",
        "useSpawn": "true",
        "timer": "",
        "oldrc": true,
        "name": "localtunnel",
        "x": 610,
        "y": 1080,
        "wires": [
            [
                "79e0592e.2724b8",
                "7354a017.4a49a"
            ],
            [],
            []
        ]
    },
    {
        "id": "79e0592e.2724b8",
        "type": "debug",
        "z": "bd23afa2.3f751",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "x": 970,
        "y": 1040,
        "wires": []
    },
    {
        "id": "7354a017.4a49a",
        "type": "mqtt out",
        "z": "bd23afa2.3f751",
        "name": "",
        "topic": "devices/unipi/0800/localtunnel/status",
        "qos": "1",
        "retain": "false",
        "broker": "e3afc424.b02108",
        "x": 1050,
        "y": 1080,
        "wires": []
    },
    {
        "id": "5bdad33b.658e3c",
        "type": "mqtt in",
        "z": "bd23afa2.3f751",
        "name": "",
        "topic": "devices/unipi/0800/localtunnel/control",
        "qos": "1",
        "broker": "e3afc424.b02108",
        "x": 250,
        "y": 1080,
        "wires": [
            [
                "c43aeb0e.7a6e18"
            ]
        ]
    },
    {
        "id": "3a88e155.768bce",
        "type": "debug",
        "z": "bd23afa2.3f751",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "x": 790,
        "y": 340,
        "wires": []
    },
    {
        "id": "704f4d26.dd7c74",
        "type": "inject",
        "z": "bd23afa2.3f751",
        "name": "Get PI temperature",
        "topic": "",
        "payload": "",
        "payloadType": "str",
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "x": 190,
        "y": 340,
        "wires": [
            [
                "2b30bdd0.d30ec2"
            ]
        ]
    },
    {
        "id": "2b30bdd0.d30ec2",
        "type": "exec",
        "z": "bd23afa2.3f751",
        "command": "/opt/vc/bin/vcgencmd measure_temp",
        "addpay": false,
        "append": "",
        "useSpawn": "false",
        "timer": "",
        "oldrc": false,
        "name": "measure_temp",
        "x": 380,
        "y": 340,
        "wires": [
            [
                "3a88e155.768bce"
            ],
            [],
            []
        ]
    },
    {
        "id": "c0a923ff.b9833",
        "type": "function",
        "z": "bd23afa2.3f751",
        "name": "",
        "func": "if (msg.payload == \"kill\") {\n    return {\"kill\":\"\"};\n} else {\n    return msg;\n}",
        "outputs": 1,
        "noerr": 0,
        "x": 470,
        "y": 1420,
        "wires": [
            [
                "d858cd73.0e6b9"
            ]
        ]
    },
    {
        "id": "c015c898.5a9978",
        "type": "debug",
        "z": "bd23afa2.3f751",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "x": 970,
        "y": 1380,
        "wires": []
    },
    {
        "id": "75ca8b10.9aba04",
        "type": "mqtt out",
        "z": "bd23afa2.3f751",
        "name": "",
        "topic": "devices/unipi/0800/ngrok/status",
        "qos": "1",
        "retain": "false",
        "broker": "e3afc424.b02108",
        "x": 1030,
        "y": 1420,
        "wires": []
    },
    {
        "id": "113afbab.b76e54",
        "type": "mqtt in",
        "z": "bd23afa2.3f751",
        "name": "",
        "topic": "devices/unipi/0800/ngrok/control",
        "qos": "1",
        "broker": "e3afc424.b02108",
        "x": 230,
        "y": 1420,
        "wires": [
            [
                "c0a923ff.b9833"
            ]
        ]
    },
    {
        "id": "d858cd73.0e6b9",
        "type": "exec",
        "z": "bd23afa2.3f751",
        "command": " ./ngrok tcp ",
        "addpay": true,
        "append": "",
        "useSpawn": "true",
        "timer": "",
        "oldrc": true,
        "name": "NGROK exec",
        "x": 620,
        "y": 1420,
        "wires": [
            [
                "75ca8b10.9aba04",
                "c015c898.5a9978"
            ],
            [],
            []
        ]
    },
    {
        "id": "1c1cc864.857a98",
        "type": "comment",
        "z": "bd23afa2.3f751",
        "name": "Get UniPi's temperature",
        "info": "",
        "x": 180,
        "y": 300,
        "wires": []
    },
    {
        "id": "66117c3f.d6fac4",
        "type": "comment",
        "z": "bd23afa2.3f751",
        "name": "Open tunnel thru ngrok. In ngrok admin, IP+port can be obtained. USAGE: send `[protocol] [port_number]` e.g. `tcp 22` to specified topic",
        "info": "",
        "x": 550,
        "y": 1340,
        "wires": []
    },
    {
        "id": "d3fea35d.ed407",
        "type": "comment",
        "z": "bd23afa2.3f751",
        "name": "Open tunnel thru localtunnel. URL is returned to `/status` topic. USAGE: send `[port_number]` to specified topic",
        "info": "",
        "x": 470,
        "y": 1000,
        "wires": []
    },
    {
        "id": "2bb4598c.2b5336",
        "type": "status",
        "z": "bd23afa2.3f751",
        "name": "",
        "scope": [
            "d858cd73.0e6b9"
        ],
        "x": 600,
        "y": 1480,
        "wires": [
            [
                "192fee75.8172c2"
            ]
        ]
    },
    {
        "id": "3cf96b5a.844394",
        "type": "status",
        "z": "bd23afa2.3f751",
        "name": "",
        "scope": [
            "e9136f6a.19dff"
        ],
        "x": 600,
        "y": 1140,
        "wires": [
            [
                "f3be9e5e.8ec17"
            ]
        ]
    },
    {
        "id": "9f6ea8f6.9a1f18",
        "type": "mqtt in",
        "z": "bd23afa2.3f751",
        "name": "",
        "topic": "devices/unipi/0800/reboot",
        "qos": "1",
        "broker": "e3afc424.b02108",
        "x": 210,
        "y": 820,
        "wires": [
            [
                "27827223.5a625e"
            ]
        ]
    },
    {
        "id": "f3be9e5e.8ec17",
        "type": "function",
        "z": "bd23afa2.3f751",
        "name": "",
        "func": "msg.payload = msg.status.text;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 770,
        "y": 1140,
        "wires": [
            [
                "7354a017.4a49a",
                "79e0592e.2724b8"
            ]
        ]
    },
    {
        "id": "192fee75.8172c2",
        "type": "function",
        "z": "bd23afa2.3f751",
        "name": "",
        "func": "msg.payload = msg.status.text;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 770,
        "y": 1480,
        "wires": [
            [
                "c015c898.5a9978",
                "75ca8b10.9aba04"
            ]
        ]
    },
    {
        "id": "33d78418.3891fc",
        "type": "link in",
        "z": "cb14f4cc.94b658",
        "name": "Modbus + HTTP",
        "links": [
            "e516d51c.271478"
        ],
        "x": 155,
        "y": 240,
        "wires": [
            [
                "c7f30a99.7f32e8"
            ]
        ]
    },
    {
        "id": "378124c5.1cbfcc",
        "type": "function",
        "z": "3bdeb4f1.e08d4c",
        "name": "Unit 2",
        "func": "//{ \n//    value: msg.payload, \n//    'fc': 4,              MODBUS FUNCTION CODE\n//    'unitid': 1,          MODBUS DEVICE ID\n//    'address': 0 ,        START ADDRESS OF THE REGISTER\n//    'quantity': 50        NUMBER OF REGISTERS TO READ\n//    'meterid': '1000',    ENECTIVA IMPORT ID\n//    'suit': '0',          ENECTIVA SUIT\n//    'protocol':'modbus',  PROTOCOL (modbus/mbus)\n//} \n// E.G. Eastron SDM630 has actual power on address 30053 (or 0x34) - therefore the address is 52\n\nmsg.payload = \n{ \n    'fc': 4, \n    'unitid': 2, \n    'address': 158, \n    'quantity': 2,\n    'value': { \n        'datatype': 'int32', \n        'meterid': 73130497,\n        'unit': \"m3\"\n    }\n} \n\n// msg.payload.value = { 'datatype': 'float', 'meterid': 73130497,};\n\nreturn msg",
        "outputs": 1,
        "noerr": 0,
        "x": 390,
        "y": 160,
        "wires": [
            [
                "4cffd359.2de14c"
            ]
        ]
    },
    {
        "id": "95ccc1dc.b7595",
        "type": "inject",
        "z": "3bdeb4f1.e08d4c",
        "name": "CRON 10 minutes",
        "topic": "",
        "payload": "",
        "payloadType": "str",
        "repeat": "",
        "crontab": "*/10 0-23 * * *",
        "once": false,
        "onceDelay": 0.1,
        "x": 170,
        "y": 120,
        "wires": [
            [
                "378124c5.1cbfcc",
                "edd07b5c.9c2a28"
            ]
        ]
    },
    {
        "id": "edd07b5c.9c2a28",
        "type": "function",
        "z": "3bdeb4f1.e08d4c",
        "name": "Unit 2",
        "func": "// { \n//     'fc': 4,                     FUNCTION CODE\n//     'unitid': 2,                 UNIT ID (Address on the bus)\n//     'address': 23,               STARTING REGISTER\n//     'quantity': 2,               NUMBER OF REGISTERS TO READ\n//     'value': { \n//         'datatype': 'float',     DATA TYPE\n//         'meterid': 123,          METER ID USED IN ENECTIVA\n//     }\n// } \n// E.G. Eastron SDM630 has actual power on address 30053 (or 0x34) - therefore the address is 52\n\nmsg.payload = \n{ \n    'fc': 4, \n    'unitid': 2, \n    'address': 23, \n    'quantity': 2,\n    'value': { \n        'datatype': 'float', \n        'meterid': 123,\n    }\n} \n\n// msg.payload.value = { 'datatype': 'float', 'meterid': 73130497,};\n\nreturn msg",
        "outputs": 1,
        "noerr": 0,
        "x": 390,
        "y": 120,
        "wires": [
            [
                "4cffd359.2de14c"
            ]
        ]
    },
    {
        "id": "e516d51c.271478",
        "type": "link out",
        "z": "3bdeb4f1.e08d4c",
        "name": "",
        "links": [
            "33d78418.3891fc"
        ],
        "x": 920,
        "y": 120,
        "wires": []
    },
    {
        "id": "4e2738a2.d7bf28",
        "type": "link in",
        "z": "459c0460.b141bc",
        "name": "Modbus + MQTT",
        "links": [
            "38512107.7bc6fe"
        ],
        "x": 155,
        "y": 100,
        "wires": [
            [
                "8c9d4c73.692fc"
            ]
        ]
    },
    {
        "id": "7ea7f18d.3e9a",
        "type": "function",
        "z": "3bdeb4f1.e08d4c",
        "name": "Unit 1",
        "func": "//{ \n//    value: msg.payload, \n//    'fc': 4,              MODBUS FUNCTION CODE\n//    'unitid': 1,          MODBUS DEVICE ID\n//    'address': 0 ,        START ADDRESS OF THE REGISTER\n//    'quantity': 50        NUMBER OF REGISTERS TO READ\n//    'meterid': '1000',    ENECTIVA IMPORT ID\n//    'suit': '0',          ENECTIVA SUIT\n//    'protocol':'modbus',  PROTOCOL (modbus/mbus)\n//} \n// E.G. Eastron SDM630 has actual power on address 30053 (or 0x34) - therefore the address is 52\n\nmsg.payload = \n{ \n    'fc': 3, \n    'unitid': 1, \n    'address': 8320, \n    'quantity': 2,\n    'value': { \n        'datatype': 'float', \n        'meterid': 18070292,\n    }\n} \n\n// msg.payload.value = { 'datatype': 'float', 'meterid': 73130497,};\n\nreturn msg",
        "outputs": 1,
        "noerr": 0,
        "x": 390,
        "y": 400,
        "wires": [
            [
                "3e1a21fa.74649e"
            ]
        ]
    },
    {
        "id": "3c0825f2.98011a",
        "type": "inject",
        "z": "3bdeb4f1.e08d4c",
        "name": "seconds",
        "topic": "",
        "payload": "",
        "payloadType": "str",
        "repeat": "15",
        "crontab": "",
        "once": true,
        "onceDelay": "1",
        "x": 180,
        "y": 400,
        "wires": [
            [
                "7ea7f18d.3e9a"
            ]
        ]
    },
    {
        "id": "38512107.7bc6fe",
        "type": "link out",
        "z": "3bdeb4f1.e08d4c",
        "name": "",
        "links": [
            "4e2738a2.d7bf28"
        ],
        "x": 915,
        "y": 400,
        "wires": []
    },
    {
        "id": "7960d104.693bc",
        "type": "comment",
        "z": "3bdeb4f1.e08d4c",
        "name": "HTTP",
        "info": "",
        "x": 1050,
        "y": 120,
        "wires": []
    },
    {
        "id": "2df8cc25.a03dd4",
        "type": "comment",
        "z": "3bdeb4f1.e08d4c",
        "name": "MQTT",
        "info": "",
        "x": 1050,
        "y": 400,
        "wires": []
    },
    {
        "id": "1a9b10ad.fc7f7f",
        "type": "debug",
        "z": "3bdeb4f1.e08d4c",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "x": 950,
        "y": 160,
        "wires": []
    },
    {
        "id": "4cffd359.2de14c",
        "type": "function",
        "z": "3bdeb4f1.e08d4c",
        "name": "pass",
        "func": "\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 790,
        "y": 120,
        "wires": [
            [
                "e516d51c.271478",
                "1a9b10ad.fc7f7f"
            ]
        ]
    },
    {
        "id": "3e1a21fa.74649e",
        "type": "function",
        "z": "3bdeb4f1.e08d4c",
        "name": "pass",
        "func": "\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 790,
        "y": 400,
        "wires": [
            [
                "b80f1db.772cee",
                "38512107.7bc6fe"
            ]
        ]
    },
    {
        "id": "b80f1db.772cee",
        "type": "debug",
        "z": "3bdeb4f1.e08d4c",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "x": 950,
        "y": 440,
        "wires": []
    },
    {
        "id": "be79d3f1.215ea",
        "type": "comment",
        "z": "bd23afa2.3f751",
        "name": "Reboot. USAGE: send 'reboot' to specified topic",
        "info": "",
        "x": 280,
        "y": 700,
        "wires": []
    },
    {
        "id": "bc8371f2.f9958",
        "type": "inject",
        "z": "bd23afa2.3f751",
        "name": "Config after strartup",
        "topic": "",
        "payload": "",
        "payloadType": "str",
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": "0",
        "x": 200,
        "y": 60,
        "wires": [
            [
                "65393f3c.32cd9"
            ]
        ]
    },
    {
        "id": "65393f3c.32cd9",
        "type": "function",
        "z": "bd23afa2.3f751",
        "name": "",
        "func": "global.set('cust_uuid','1e93b77a-64df-42b1-844d-55d1e124a548');",
        "outputs": 1,
        "noerr": 0,
        "x": 490,
        "y": 60,
        "wires": [
            []
        ]
    },
    {
        "id": "db0b8b7c.afd9b8",
        "type": "comment",
        "z": "bd23afa2.3f751",
        "name": "After startup config - UUID etc",
        "info": "",
        "x": 220,
        "y": 20,
        "wires": []
    },
    {
        "id": "27827223.5a625e",
        "type": "function",
        "z": "bd23afa2.3f751",
        "name": "",
        "func": "if (msg.payload.toLowerCase() == 'reboot') {\n    return msg;\n}",
        "outputs": 1,
        "noerr": 0,
        "x": 410,
        "y": 820,
        "wires": [
            [
                "ffeaaca7.56a1"
            ]
        ]
    },
    {
        "id": "1d1434cd.5fedfb",
        "type": "link in",
        "z": "bd23afa2.3f751",
        "name": "LED control",
        "links": [
            "b4c714ed.47c018"
        ],
        "x": 115,
        "y": 560,
        "wires": [
            [
                "98f79b79.9ec288"
            ]
        ]
    },
    {
        "id": "76993994.3d0c98",
        "type": "http request",
        "z": "bd23afa2.3f751",
        "name": "",
        "method": "POST",
        "ret": "obj",
        "url": "",
        "tls": "",
        "x": 510,
        "y": 520,
        "wires": [
            [
                "37ff563f.415bfa"
            ]
        ]
    },
    {
        "id": "98f79b79.9ec288",
        "type": "function",
        "z": "bd23afa2.3f751",
        "name": "",
        "func": "led = msg.payload.led;\nvalue = msg.payload.value;\n\nmsg = {};\n\nmsg.payload = {\"value\": value.toString()};\nmsg.url = '127.0.0.1:8080/json/led/1_0' + led.toString();\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 350,
        "y": 520,
        "wires": [
            [
                "76993994.3d0c98",
                "9dfb0df7.04262"
            ]
        ]
    },
    {
        "id": "37ff563f.415bfa",
        "type": "debug",
        "z": "bd23afa2.3f751",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "x": 690,
        "y": 520,
        "wires": []
    },
    {
        "id": "9dfb0df7.04262",
        "type": "debug",
        "z": "bd23afa2.3f751",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "x": 510,
        "y": 480,
        "wires": []
    }
]
